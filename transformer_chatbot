{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "orig_nbformat": 4,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.10 64-bit ('transformer_chatbot': conda)"
  },
  "interpreter": {
   "hash": "3ec59ffd65a17d02919676ef9ed7c1a9be5574d8252ad1bca031311987c5d24c"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "source": [
    "# Transformer 모델"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F \n",
    "import torchtext\n",
    "import torch.optim as optim\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.manual_seed(1234)\n",
    "np.random.seed(1234)\n",
    "random.seed(1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PositionalEncoder(nn.Module):\n",
    "    def __init__(self, position, d_model):\n",
    "        super().__init__()\n",
    "\n",
    "        self.d_model = d_model \n",
    "        pe = torch.zeros(position, d_model)\n",
    "\n",
    "        device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "        pe = pe.to(device)\n",
    "\n",
    "        for pos in range(position):\n",
    "            for i in range(0, d_model, 2):\n",
    "                pe[pos, i] = math.sin(pos/(10000 ** ((2 * i)/d_model)))\n",
    "                pe[pos, i + 1] = math.cos(pos/(10000 ** ((2 * i)/d_model)))\n",
    "\n",
    "        self.pe = pe.unsqueeze(0)\n",
    "        self.pe.requires_grad = False\n",
    "\n",
    "    def forward(self, x):\n",
    "        ret = math.sqrt(self.d_model)*x + self.pe[:, :x.size(1)]\n",
    "        return ret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scaled_dot_product_attention(query, key, value, mask):\n",
    "  matmul_qk = torch.matmul(query, torch.transpose(key,2,3))\n",
    "  depth = key.shape[-1]\n",
    "  logits = matmul_qk / math.sqrt(depth)\n",
    "\n",
    "  if mask is not None:\n",
    "    logits += (mask * -1e9)\n",
    "\n",
    "  attention_weights = F.softmax(logits, dim=-1)\n",
    "\n",
    "  output = torch.matmul(attention_weights, value)\n",
    "\n",
    "  return output, attention_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MultiheadAttention(nn.Module):\n",
    "\n",
    "    def __init__(self, d_model, num_heads):\n",
    "        super(MultiheadAttention, self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "\n",
    "        assert d_model % self.num_heads == 0\n",
    "        self.depth = int(d_model/self.num_heads)\n",
    "\n",
    "        self.q_linear = nn.Linear(d_model, d_model)\n",
    "        self.v_linear = nn.Linear(d_model, d_model)\n",
    "        self.k_linear = nn.Linear(d_model, d_model)\n",
    "        self.out = nn.Linear(d_model, d_model)\n",
    "\n",
    "\n",
    "    def split_heads(self, inputs, batch_size):\n",
    "      inputs = torch.reshape(\n",
    "          inputs, (batch_size, -1, self.num_heads, self.depth))\n",
    "      return torch.transpose(inputs, 1,2)\n",
    "\n",
    "    def forward(self, inputs):\n",
    "        query, key, value, mask = inputs['query'], inputs['key'], inputs['value'], inputs['mask']\n",
    "        batch_size = query.shape[0]\n",
    "        # query : (batch_size, query의 문장 길이, d_model)\n",
    "        # key : (batch_size, key의 문장 길이, d_model)\n",
    "        # value : (batch_size, value의 문장 길이, d_model)\n",
    "        query = self.q_linear(query)\n",
    "        key = self.k_linear(key)\n",
    "        value = self.v_linear(value)\n",
    "\n",
    "\n",
    "        # query : (batch_size, num_heads, query의 문장 길이, d_model/num_heads)\n",
    "        # key : (batch_size, num_heads, key의 문장 길이, d_model/num_heads)\n",
    "        # value : (batch_size, num_heads, value의 문장 길이, d_model/num_heads)\n",
    "        query = self.split_heads(query, batch_size)\n",
    "        key = self.split_heads(key, batch_size)\n",
    "        value = self.split_heads(value, batch_size)\n",
    "\n",
    "        # (batch_size, num_heads, query의 문장 길이, d_model/num_heads)\n",
    "        scaled_attention, _ = scaled_dot_product_attention(query, key, value, mask)\n",
    "        # (batch_size, query의 문장 길이, num_heads, d_model/num_heads)\n",
    "        scaled_attention = torch.transpose(scaled_attention, 1,2)\n",
    "\n",
    "        # (batch_size, query의 문장 길이, d_model)\n",
    "        concat_attention = torch.reshape(scaled_attention,\n",
    "                                      (batch_size, -1, self.d_model))\n",
    "\n",
    "        outputs = self.out(concat_attention)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, d_model, d_ff):\n",
    "        super(FeedForward, self).__init__()\n",
    "        self.linear_1 = nn.Linear(d_model, d_ff)\n",
    "        self.linear_2 = nn.Linear(d_ff, d_model)\n",
    "\n",
    "    def forward(self, attention):\n",
    "        outputs = self.linear_1(attention)\n",
    "        outputs = F.relu(outputs)\n",
    "        outputs = self.linear_2(outputs)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class EncoderBlock(nn.Module):\n",
    "  def __init__(self, d_ff, d_model, num_heads, dropout):\n",
    "    super(EncoderBlock, self).__init__()\n",
    "    \n",
    "    self.attn = MultiheadAttention(d_model, num_heads)\n",
    "    self.dropout_1 = nn.Dropout(dropout)\n",
    "    self.norm_1 = nn.LayerNorm(d_model)\n",
    "    self.ff = FeedForward(d_model, d_ff)\n",
    "    self.dropout_2 = nn.Dropout(dropout)\n",
    "    self.norm_2 = nn.LayerNorm(d_model)\n",
    "\n",
    "  def forward(self, inputs, padding_mask):\n",
    "    attention = self.attn({'query': inputs, 'key': inputs, 'value': inputs, 'mask': padding_mask})\n",
    "    attention = self.dropout_1(attention)\n",
    "    attention = self.norm_1(inputs + attention)\n",
    "    outputs = self.ff(attention)\n",
    "    outputs = self.dropout_2(outputs)\n",
    "    outputs = self.norm_2(attention + outputs)\n",
    "\n",
    "    return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Encoder(nn.Module):\n",
    "  def __init__(self,text_embedding_vectors, vocab_size, num_layers, d_ff, d_model, num_heads, dropout):\n",
    "    super(Encoder, self).__init__()\n",
    "    self.vocab_size = vocab_size\n",
    "    self.d_model = d_model\n",
    "    self.num_layers = num_layers\n",
    "    self.embb = nn.Embedding(text_embedding_vectors, d_model)\n",
    "    self.dropout_1 = nn.Dropout(dropout)\n",
    "    self.PE = PositionalEncoder(vocab_size, d_model)\n",
    "    self.encoder_block = EncoderBlock(d_ff, d_model, num_heads, dropout)\n",
    "  def forward(self, x, padding_mask):\n",
    "    emb = self.embb(x)\n",
    "    emb *= math.sqrt(self.d_model)\n",
    "    emb = self.PE(emb)\n",
    "    output = self.dropout_1(emb)\n",
    "\n",
    "    for i in range(self.num_layers):\n",
    "      output = self.encoder_block(output, padding_mask)\n",
    "\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DecoderBlock(nn.Module):\n",
    "  def __init__(self, d_ff, d_model, num_heads, dropout):\n",
    "    super(DecoderBlock, self).__init__()\n",
    "    \n",
    "    self.attn = MultiheadAttention(d_model, num_heads)\n",
    "    self.attn_2 = MultiheadAttention(d_model, num_heads)\n",
    "    self.dropout_1 = nn.Dropout(dropout)\n",
    "    self.norm_1 = nn.LayerNorm(d_model)\n",
    "    self.ff = FeedForward(d_model, d_ff)\n",
    "    self.dropout_2 = nn.Dropout(dropout)\n",
    "    self.dropout_3 = nn.Dropout(dropout)\n",
    "    self.norm_2 = nn.LayerNorm(d_model)\n",
    "    self.norm_3 = nn.LayerNorm(d_model)\n",
    "\n",
    "  def forward(self, inputs, enc_outputs, padding_mask, look_ahead_mask):\n",
    "    attention1 = self.attn({'query': inputs, 'key': inputs, 'value': inputs, 'mask': look_ahead_mask})\n",
    "    attention1 = self.norm_1(inputs + attention1)\n",
    "    attention2 = self.attn_2({'query': attention1, 'key': enc_outputs, 'value': enc_outputs, 'mask': padding_mask})\n",
    "    attention2 = self.dropout_1(attention2)\n",
    "    attention2 = self.norm_2(attention1 + attention2)\n",
    "\n",
    "    outputs = self.ff(attention2)\n",
    "    outputs = self.dropout_3(outputs)\n",
    "    outputs = self.norm_3(attention2 + outputs)\n",
    "\n",
    "    return outputs  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Decoder(nn.Module):\n",
    "  def __init__(self,text_embedding_vectors,  vocab_size, num_layers, d_ff, d_model, num_heads, dropout):\n",
    "    super(Decoder, self).__init__()\n",
    "    self.vocab_size = vocab_size\n",
    "    self.d_model = d_model\n",
    "    self.num_layers = num_layers\n",
    "    self.embb = nn.Embedding(text_embedding_vectors, d_model)\n",
    "    self.dropout_1 = nn.Dropout(dropout)\n",
    "    self.PE = PositionalEncoder(vocab_size, d_model)\n",
    "    self.decoder_block = DecoderBlock(d_ff, d_model, num_heads, dropout)\n",
    "  def forward(self, enc_output, dec_input, padding_mask, look_ahead_mask):\n",
    "    emb = self.embb(dec_input)\n",
    "    emb *= math.sqrt(self.d_model)\n",
    "    emb = self.PE(emb)\n",
    "    output = self.dropout_1(emb)\n",
    "    for i in range(self.num_layers):\n",
    "      output = self.decoder_block(output, enc_output, padding_mask, look_ahead_mask)\n",
    "\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class transformer(nn.Module):\n",
    "    def __init__(self, text_embedding_vectors, vocab_size, num_layers, d_ff, d_model, num_heads, dropout):\n",
    "        self.vocab_size = vocab_size\n",
    "        super(transformer, self).__init__()\n",
    "        self.enc_outputs = Encoder(text_embedding_vectors, vocab_size, num_layers, d_ff, d_model, num_heads, dropout)\n",
    "        self.dec_outputs = Decoder(text_embedding_vectors, vocab_size, num_layers, d_ff, d_model, num_heads, dropout)\n",
    "        self.output = nn.Linear(d_model, text_embedding_vectors)\n",
    "        self.softmax = nn.LogSoftmax(dim=-1)\n",
    "\n",
    "    def forward(self, input, dec_input):\n",
    "        enc_input = input\n",
    "        dec_input = dec_input\n",
    "        enc_padding_mask = create_padding_mask(enc_input)\n",
    "        dec_padding_mask = create_padding_mask(enc_input)\n",
    "        look_ahead_mask = create_look_ahead_mask(dec_input)\n",
    "    \n",
    "        enc_output = self.enc_outputs(enc_input, enc_padding_mask)\n",
    "        dec_output = self.dec_outputs(enc_output, dec_input, dec_padding_mask, look_ahead_mask)\n",
    "        output = self.output(dec_output)\n",
    "        return output"
   ]
  },
  {
   "source": [
    "# Torchtext를 이용한 전처리"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchtext.legacy import data, datasets\n",
    "from soynlp.tokenizer import LTokenizer\n",
    "import torch\n",
    "tokenizer = LTokenizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "['자연어', '처리', '연구실', '입니다.']"
      ]
     },
     "metadata": {},
     "execution_count": 13
    }
   ],
   "source": [
    "tokenizer('자연어 처리 연구실 입니다.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "VOCAB_SIZE = 40\n",
    "\n",
    "Q = data.Field(\n",
    "    sequential=True,\n",
    "    use_vocab=True,\n",
    "    lower=True,\n",
    "    tokenize=tokenizer,\n",
    "    batch_first=True,\n",
    "    init_token=\"<BOS>\",\n",
    "    eos_token=\"<EOS>\",\n",
    "    fix_length=VOCAB_SIZE\n",
    ")\n",
    "\n",
    "A = data.Field(\n",
    "    sequential=True,\n",
    "    use_vocab=True,\n",
    "    lower=True,\n",
    "    tokenize=tokenizer,\n",
    "    batch_first=True,\n",
    "    init_token=\"<BOS>\",\n",
    "    eos_token=\"<EOS>\",\n",
    "    fix_length=VOCAB_SIZE\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainset = data.TabularDataset(path='train.csv', format='csv', skip_header=True,fields=[('Q', Q),('A', A)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "{'Q': ['나도', '조카가', '생겨', '너무', '기뻐'], 'A': ['정말', '좋은', '소식이네요', '축하할', '특별한', '계획이', '있을까요']}\n"
     ]
    }
   ],
   "source": [
    "print(vars(trainset[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "훈련 샘플의 개수 : 199360\n"
     ]
    }
   ],
   "source": [
    "print('훈련 샘플의 개수 : {}'.format(len(trainset)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q.build_vocab(trainset.Q, trainset.A, min_freq = 2) \n",
    "A.vocab = Q.vocab\n",
    "PAD_TOKEN, START_TOKEN, END_TOKEN, UNK_TOKEN = Q.vocab.stoi['<pad>'], Q.vocab.stoi['<BOS>'], Q.vocab.stoi['<EOS>'], Q.vocab.stoi['<unk>']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#VOCAB_SIZE = VOCAB_SIZE\n",
    "text_embedding_vectors = len(Q.vocab)\n",
    "NUM_LAYERS = 4\n",
    "D_FF = 512\n",
    "D_MODEL = 128\n",
    "NUM_HEADS = 4\n",
    "DROPOUT = 0.3\n",
    "BATCH_SIZE=64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "train_iter = data.BucketIterator(\n",
    "        trainset, batch_size=BATCH_SIZE,\n",
    "        shuffle=True, repeat=False, sort=False, device = device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "89312\n"
     ]
    },
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "transformer(\n",
       "  (enc_outputs): Encoder(\n",
       "    (embb): Embedding(89312, 128)\n",
       "    (dropout_1): Dropout(p=0.3, inplace=False)\n",
       "    (PE): PositionalEncoder()\n",
       "    (encoder_block): EncoderBlock(\n",
       "      (attn): MultiheadAttention(\n",
       "        (q_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (v_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (k_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (out): Linear(in_features=128, out_features=128, bias=True)\n",
       "      )\n",
       "      (dropout_1): Dropout(p=0.3, inplace=False)\n",
       "      (norm_1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n",
       "      (ff): FeedForward(\n",
       "        (linear_1): Linear(in_features=128, out_features=512, bias=True)\n",
       "        (linear_2): Linear(in_features=512, out_features=128, bias=True)\n",
       "      )\n",
       "      (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "      (norm_2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n",
       "    )\n",
       "  )\n",
       "  (dec_outputs): Decoder(\n",
       "    (embb): Embedding(89312, 128)\n",
       "    (dropout_1): Dropout(p=0.3, inplace=False)\n",
       "    (PE): PositionalEncoder()\n",
       "    (decoder_block): DecoderBlock(\n",
       "      (attn): MultiheadAttention(\n",
       "        (q_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (v_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (k_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (out): Linear(in_features=128, out_features=128, bias=True)\n",
       "      )\n",
       "      (attn_2): MultiheadAttention(\n",
       "        (q_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (v_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (k_linear): Linear(in_features=128, out_features=128, bias=True)\n",
       "        (out): Linear(in_features=128, out_features=128, bias=True)\n",
       "      )\n",
       "      (dropout_1): Dropout(p=0.3, inplace=False)\n",
       "      (norm_1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n",
       "      (ff): FeedForward(\n",
       "        (linear_1): Linear(in_features=128, out_features=512, bias=True)\n",
       "        (linear_2): Linear(in_features=512, out_features=128, bias=True)\n",
       "      )\n",
       "      (dropout_2): Dropout(p=0.3, inplace=False)\n",
       "      (dropout_3): Dropout(p=0.3, inplace=False)\n",
       "      (norm_2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n",
       "      (norm_3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n",
       "    )\n",
       "  )\n",
       "  (output): Linear(in_features=128, out_features=89312, bias=True)\n",
       "  (softmax): LogSoftmax(dim=-1)\n",
       ")"
      ]
     },
     "metadata": {},
     "execution_count": 21
    }
   ],
   "source": [
    "# model\n",
    "print(text_embedding_vectors)\n",
    "net = transformer(text_embedding_vectors = text_embedding_vectors, \n",
    "                  vocab_size=VOCAB_SIZE, num_layers=NUM_LAYERS, d_ff=D_FF, d_model=D_MODEL, \n",
    "                  num_heads=NUM_HEADS, dropout=DROPOUT)\n",
    "\n",
    "# init network\n",
    "def weights_init(m):\n",
    "    classname = m.__class__.__name__\n",
    "    if classname.find('Linear') != -1:\n",
    "        # init linear\n",
    "        nn.init.kaiming_normal_(m.weight)\n",
    "        if m.bias is not None:\n",
    "            nn.init.constant_(m.bias, 0.0)\n",
    "\n",
    "net.train()\n",
    "\n",
    "net.apply(weights_init)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# loss function\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "\n",
    "learning_rate = 2e-4\n",
    "optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_padding_mask(x):\n",
    "  input_pad = 0\n",
    "  mask = (x == input_pad).float()\n",
    "  mask = mask.unsqueeze(1).unsqueeze(1)\n",
    "  # (batch_size, 1, 1, key sentence length)\n",
    "  return mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_look_ahead_mask(x):\n",
    "  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "  seq_len = x.shape[1]\n",
    "  look_ahead_mask = torch.ones(seq_len, seq_len)\n",
    "  look_ahead_mask = torch.triu(look_ahead_mask, diagonal=1).to(device)\n",
    "\n",
    "  padding_mask = create_padding_mask(x).to(device) \n",
    "  return torch.maximum(look_ahead_mask, padding_mask)"
   ]
  },
  {
   "source": [
    "# 훈련"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "import datetime\n",
    "from tqdm import tqdm \n",
    "import os\n",
    "\n",
    "def train_model(net, train_iter, criterion, optimizer, num_epochs):\n",
    "    start_time = time.time()\n",
    "\n",
    "    ntokens = len(Q.vocab.stoi)\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    print(\"사용 디바이스:\", device)\n",
    "    print('-----start-------')\n",
    "    net.to(device)\n",
    "    epoch_ = []\n",
    "    epoch_train_loss = []\n",
    "    torch.backends.cudnn.benchmark = True\n",
    "    \n",
    "    net.train()\n",
    "    best_epoch_loss = float(\"inf\")\n",
    "    for epoch in range(num_epochs):\n",
    "      epoch_loss = 0.0\n",
    "      cnt= 0\n",
    "      for batch in tqdm(train_iter):\n",
    "          questions = batch.Q.to(device)\n",
    "          answers = batch.A.to(device)\n",
    "          with torch.set_grad_enabled(True):\n",
    "            preds = net(questions, answers)\n",
    "            pad = torch.LongTensor(answers.size(0), 1).fill_(PAD_TOKEN).to(device)\n",
    "            preds_id = torch.transpose(preds,1,2)\n",
    "            outputs = torch.cat((answers[:, 1:], pad), -1)\n",
    "            optimizer.zero_grad()\n",
    "            loss = criterion(preds_id, outputs) \n",
    "            loss.backward()\n",
    "            torch.nn.utils.clip_grad_norm_(net.parameters(), 0.5)\n",
    "            optimizer.step()\n",
    "            epoch_loss +=loss.item()\n",
    "            cnt += 1\n",
    "      epoch_loss = epoch_loss / cnt\n",
    "      if not best_epoch_loss or epoch_loss < best_epoch_loss:\n",
    "        if not os.path.isdir(\"snapshot\"):\n",
    "            os.makedirs(\"snapshot\")\n",
    "        torch.save(net.state_dict(), './snapshot/transformermodel.pt')\n",
    "        \n",
    "      epoch_.append(epoch)\n",
    "      epoch_train_loss.append(epoch_loss)\n",
    "      \n",
    "      print(\"Epoch {0}/{1} Average Loss: {2}\".format(epoch+1, num_epochs, epoch_loss))\n",
    "      \n",
    "    \n",
    "    \n",
    "    fig = plt.figure(figsize=(8,8))\n",
    "    fig.set_facecolor('white')\n",
    "    ax = fig.add_subplot()\n",
    "\n",
    "    ax.plot(epoch_,epoch_train_loss, label='Average loss')\n",
    "\n",
    "\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('epoch')\n",
    "    ax.set_ylabel('loss')\n",
    "\n",
    "    plt.show()\n",
    "    end_time = time.time() - start_time\n",
    "    times = str(datetime.timedelta(seconds=end_time)).split(\".\")\n",
    "    print('Finished in {0}'.format(times[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "사용 디바이스: cuda\n",
      "-----start-------\n",
      "100%|██████████| 3115/3115 [04:37<00:00, 11.23it/s]\n",
      "Epoch 1/30 Average Loss: 1.4127953381637892\n",
      "100%|██████████| 3115/3115 [04:37<00:00, 11.23it/s]\n",
      "Epoch 2/30 Average Loss: 1.2708653128548955\n",
      "100%|██████████| 3115/3115 [04:36<00:00, 11.26it/s]\n",
      "Epoch 3/30 Average Loss: 1.2245787332375588\n",
      "100%|██████████| 3115/3115 [04:37<00:00, 11.21it/s]\n",
      "Epoch 4/30 Average Loss: 1.1860831033743404\n",
      "100%|██████████| 3115/3115 [04:39<00:00, 11.14it/s]\n",
      "Epoch 5/30 Average Loss: 1.1547904890383418\n",
      "100%|██████████| 3115/3115 [04:36<00:00, 11.25it/s]\n",
      "Epoch 6/30 Average Loss: 1.1292347012323898\n",
      "100%|██████████| 3115/3115 [04:34<00:00, 11.36it/s]\n",
      "Epoch 7/30 Average Loss: 1.1072355416383637\n",
      "100%|██████████| 3115/3115 [04:34<00:00, 11.34it/s]\n",
      "Epoch 8/30 Average Loss: 1.0873444848803036\n",
      "100%|██████████| 3115/3115 [04:34<00:00, 11.35it/s]\n",
      "Epoch 9/30 Average Loss: 1.0693333780976015\n",
      "100%|██████████| 3115/3115 [04:33<00:00, 11.40it/s]\n",
      "Epoch 10/30 Average Loss: 1.0526002901323726\n",
      "100%|██████████| 3115/3115 [04:38<00:00, 11.18it/s]\n",
      "Epoch 11/30 Average Loss: 1.0374474112715806\n",
      "100%|██████████| 3115/3115 [04:39<00:00, 11.13it/s]\n",
      "Epoch 12/30 Average Loss: 1.0235213907916894\n",
      "100%|██████████| 3115/3115 [05:03<00:00, 10.26it/s]\n",
      "Epoch 13/30 Average Loss: 1.010978990573179\n",
      "100%|██████████| 3115/3115 [04:49<00:00, 10.75it/s]\n",
      "Epoch 14/30 Average Loss: 0.9990389013175597\n",
      "100%|██████████| 3115/3115 [04:34<00:00, 11.34it/s]\n",
      "Epoch 15/30 Average Loss: 0.9882845757286965\n",
      "100%|██████████| 3115/3115 [04:59<00:00, 10.40it/s]\n",
      "Epoch 16/30 Average Loss: 0.9779701576186987\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.44it/s]\n",
      "Epoch 17/30 Average Loss: 0.968473253797375\n",
      "100%|██████████| 3115/3115 [05:02<00:00, 10.31it/s]\n",
      "Epoch 18/30 Average Loss: 0.959099729313705\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.43it/s]\n",
      "Epoch 19/30 Average Loss: 0.9501807937269992\n",
      "100%|██████████| 3115/3115 [05:02<00:00, 10.31it/s]\n",
      "Epoch 20/30 Average Loss: 0.941922816055353\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.43it/s]\n",
      "Epoch 21/30 Average Loss: 0.933944637243476\n",
      "100%|██████████| 3115/3115 [04:59<00:00, 10.41it/s]\n",
      "Epoch 22/30 Average Loss: 0.9261740446856087\n",
      "100%|██████████| 3115/3115 [05:00<00:00, 10.36it/s]\n",
      "Epoch 23/30 Average Loss: 0.9188512514720568\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.43it/s]\n",
      "Epoch 24/30 Average Loss: 0.9117723130299613\n",
      "100%|██████████| 3115/3115 [05:01<00:00, 10.32it/s]\n",
      "Epoch 25/30 Average Loss: 0.9050396803676795\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.44it/s]\n",
      "Epoch 26/30 Average Loss: 0.8983953578131539\n",
      "100%|██████████| 3115/3115 [05:01<00:00, 10.35it/s]\n",
      "Epoch 27/30 Average Loss: 0.8916039136592687\n",
      "100%|██████████| 3115/3115 [04:59<00:00, 10.40it/s]\n",
      "Epoch 28/30 Average Loss: 0.8849250529589278\n",
      "100%|██████████| 3115/3115 [04:58<00:00, 10.43it/s]\n",
      "Epoch 29/30 Average Loss: 0.8787448204156867\n",
      "100%|██████████| 3115/3115 [05:01<00:00, 10.32it/s]\n",
      "Epoch 30/30 Average Loss: 0.8724594941682647\n"
     ]
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": "<Figure size 576x576 with 1 Axes>",
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg height=\"479.63625pt\" version=\"1.1\" viewBox=\"0 0 497.446571 479.63625\" width=\"497.446571pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <metadata>\n  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2021-07-15T17:48:52.249866</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.4.2, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 479.63625 \nL 497.446571 479.63625 \nL 497.446571 0 \nL 0 0 \nz\n\" style=\"fill:#ffffff;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 43.78125 442.08 \nL 490.18125 442.08 \nL 490.18125 7.2 \nL 43.78125 7.2 \nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0 \nL 0 3.5 \n\" id=\"ma73d6e0713\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"64.072159\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 0 -->\n      <g transform=\"translate(60.890909 456.678437)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"134.040811\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 5 -->\n      <g transform=\"translate(130.859561 456.678437)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"204.009463\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 10 -->\n      <g transform=\"translate(197.646963 456.678437)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"273.978115\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 15 -->\n      <g transform=\"translate(267.615615 456.678437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"343.946767\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 20 -->\n      <g transform=\"translate(337.584267 456.678437)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"413.915419\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 25 -->\n      <g transform=\"translate(407.552919 456.678437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_7\">\n     <g id=\"line2d_7\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"483.884071\" xlink:href=\"#ma73d6e0713\" y=\"442.08\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 30 -->\n      <g transform=\"translate(477.521571 456.678437)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" id=\"DejaVuSans-33\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_8\">\n     <!-- epoch -->\n     <g transform=\"translate(251.753125 470.356562)scale(0.1 -0.1)\">\n      <defs>\n       <path d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" id=\"DejaVuSans-70\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" id=\"DejaVuSans-6f\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3122 3366 \nL 3122 2828 \nQ 2878 2963 2633 3030 \nQ 2388 3097 2138 3097 \nQ 1578 3097 1268 2742 \nQ 959 2388 959 1747 \nQ 959 1106 1268 751 \nQ 1578 397 2138 397 \nQ 2388 397 2633 464 \nQ 2878 531 3122 666 \nL 3122 134 \nQ 2881 22 2623 -34 \nQ 2366 -91 2075 -91 \nQ 1284 -91 818 406 \nQ 353 903 353 1747 \nQ 353 2603 823 3093 \nQ 1294 3584 2113 3584 \nQ 2378 3584 2631 3529 \nQ 2884 3475 3122 3366 \nz\n\" id=\"DejaVuSans-63\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" id=\"DejaVuSans-68\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"61.523438\" xlink:href=\"#DejaVuSans-70\"/>\n      <use x=\"125\" xlink:href=\"#DejaVuSans-6f\"/>\n      <use x=\"186.181641\" xlink:href=\"#DejaVuSans-63\"/>\n      <use x=\"241.162109\" xlink:href=\"#DejaVuSans-68\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_8\">\n      <defs>\n       <path d=\"M 0 0 \nL -3.5 0 \n\" id=\"m4e6f8b0d6f\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"402.162271\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0.9 -->\n      <g transform=\"translate(20.878125 405.96149)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" id=\"DejaVuSans-2e\" transform=\"scale(0.015625)\"/>\n        <path d=\"M 703 97 \nL 703 672 \nQ 941 559 1184 500 \nQ 1428 441 1663 441 \nQ 2288 441 2617 861 \nQ 2947 1281 2994 2138 \nQ 2813 1869 2534 1725 \nQ 2256 1581 1919 1581 \nQ 1219 1581 811 2004 \nQ 403 2428 403 3163 \nQ 403 3881 828 4315 \nQ 1253 4750 1959 4750 \nQ 2769 4750 3195 4129 \nQ 3622 3509 3622 2328 \nQ 3622 1225 3098 567 \nQ 2575 -91 1691 -91 \nQ 1453 -91 1209 -44 \nQ 966 3 703 97 \nz\nM 1959 2075 \nQ 2384 2075 2632 2365 \nQ 2881 2656 2881 3163 \nQ 2881 3666 2632 3958 \nQ 2384 4250 1959 4250 \nQ 1534 4250 1286 3958 \nQ 1038 3666 1038 3163 \nQ 1038 2656 1286 2365 \nQ 1534 2075 1959 2075 \nz\n\" id=\"DejaVuSans-39\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-39\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"328.995655\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 1.0 -->\n      <g transform=\"translate(20.878125 332.794873)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_10\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"255.829038\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 1.1 -->\n      <g transform=\"translate(20.878125 259.628257)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-31\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"182.662422\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 1.2 -->\n      <g transform=\"translate(20.878125 186.46164)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_12\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"109.495805\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 1.3 -->\n      <g transform=\"translate(20.878125 113.295024)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-33\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_13\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#m4e6f8b0d6f\" y=\"36.329189\"/>\n      </g>\n     </g>\n     <g id=\"text_14\">\n      <!-- 1.4 -->\n      <g transform=\"translate(20.878125 40.128407)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" id=\"DejaVuSans-34\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_15\">\n     <!-- loss -->\n     <g transform=\"translate(14.798438 234.297812)rotate(-90)scale(0.1 -0.1)\">\n      <defs>\n       <path d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" id=\"DejaVuSans-6c\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-6c\"/>\n      <use x=\"27.783203\" xlink:href=\"#DejaVuSans-6f\"/>\n      <use x=\"88.964844\" xlink:href=\"#DejaVuSans-73\"/>\n      <use x=\"141.064453\" xlink:href=\"#DejaVuSans-73\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_14\">\n    <path clip-path=\"url(#p781276b0eb)\" d=\"M 64.072159 26.967273 \nL 78.065889 130.81267 \nL 92.05962 164.678994 \nL 106.05335 192.844944 \nL 120.047081 215.740691 \nL 134.040811 234.438996 \nL 148.034542 250.535037 \nL 162.028272 265.08865 \nL 176.022002 278.266768 \nL 190.015733 290.509802 \nL 204.009463 301.596651 \nL 218.003194 311.785849 \nL 231.996924 320.962699 \nL 245.990654 329.698858 \nL 259.984385 337.567434 \nL 273.978115 345.114145 \nL 287.971846 352.062708 \nL 301.965576 358.920999 \nL 315.959306 365.446682 \nL 329.953037 371.488765 \nL 343.946767 377.326128 \nL 357.940498 383.011608 \nL 371.934228 388.369448 \nL 385.927958 393.548868 \nL 399.921689 398.474907 \nL 413.915419 403.336333 \nL 427.90915 408.305403 \nL 441.90288 413.1921 \nL 455.896611 417.713967 \nL 469.890341 422.312727 \n\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 43.78125 442.08 \nL 43.78125 7.2 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 490.18125 442.08 \nL 490.18125 7.2 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 43.78125 442.08 \nL 490.18125 442.08 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 43.78125 7.2 \nL 490.18125 7.2 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"legend_1\">\n    <g id=\"patch_7\">\n     <path d=\"M 387.621875 29.878125 \nL 483.18125 29.878125 \nQ 485.18125 29.878125 485.18125 27.878125 \nL 485.18125 14.2 \nQ 485.18125 12.2 483.18125 12.2 \nL 387.621875 12.2 \nQ 385.621875 12.2 385.621875 14.2 \nL 385.621875 27.878125 \nQ 385.621875 29.878125 387.621875 29.878125 \nz\n\" style=\"fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;\"/>\n    </g>\n    <g id=\"line2d_15\">\n     <path d=\"M 389.621875 20.298437 \nL 409.621875 20.298437 \n\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\n    </g>\n    <g id=\"line2d_16\"/>\n    <g id=\"text_16\">\n     <!-- Average loss -->\n     <g transform=\"translate(417.621875 23.798437)scale(0.1 -0.1)\">\n      <defs>\n       <path d=\"M 2188 4044 \nL 1331 1722 \nL 3047 1722 \nL 2188 4044 \nz\nM 1831 4666 \nL 2547 4666 \nL 4325 0 \nL 3669 0 \nL 3244 1197 \nL 1141 1197 \nL 716 0 \nL 50 0 \nL 1831 4666 \nz\n\" id=\"DejaVuSans-41\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 191 3500 \nL 800 3500 \nL 1894 563 \nL 2988 3500 \nL 3597 3500 \nL 2284 0 \nL 1503 0 \nL 191 3500 \nz\n\" id=\"DejaVuSans-76\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2631 2963 \nQ 2534 3019 2420 3045 \nQ 2306 3072 2169 3072 \nQ 1681 3072 1420 2755 \nQ 1159 2438 1159 1844 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1341 3275 1631 3429 \nQ 1922 3584 2338 3584 \nQ 2397 3584 2469 3576 \nQ 2541 3569 2628 3553 \nL 2631 2963 \nz\n\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2194 1759 \nQ 1497 1759 1228 1600 \nQ 959 1441 959 1056 \nQ 959 750 1161 570 \nQ 1363 391 1709 391 \nQ 2188 391 2477 730 \nQ 2766 1069 2766 1631 \nL 2766 1759 \nL 2194 1759 \nz\nM 3341 1997 \nL 3341 0 \nL 2766 0 \nL 2766 531 \nQ 2569 213 2275 61 \nQ 1981 -91 1556 -91 \nQ 1019 -91 701 211 \nQ 384 513 384 1019 \nQ 384 1609 779 1909 \nQ 1175 2209 1959 2209 \nL 2766 2209 \nL 2766 2266 \nQ 2766 2663 2505 2880 \nQ 2244 3097 1772 3097 \nQ 1472 3097 1187 3025 \nQ 903 2953 641 2809 \nL 641 3341 \nQ 956 3463 1253 3523 \nQ 1550 3584 1831 3584 \nQ 2591 3584 2966 3190 \nQ 3341 2797 3341 1997 \nz\n\" id=\"DejaVuSans-61\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2906 1791 \nQ 2906 2416 2648 2759 \nQ 2391 3103 1925 3103 \nQ 1463 3103 1205 2759 \nQ 947 2416 947 1791 \nQ 947 1169 1205 825 \nQ 1463 481 1925 481 \nQ 2391 481 2648 825 \nQ 2906 1169 2906 1791 \nz\nM 3481 434 \nQ 3481 -459 3084 -895 \nQ 2688 -1331 1869 -1331 \nQ 1566 -1331 1297 -1286 \nQ 1028 -1241 775 -1147 \nL 775 -588 \nQ 1028 -725 1275 -790 \nQ 1522 -856 1778 -856 \nQ 2344 -856 2625 -561 \nQ 2906 -266 2906 331 \nL 2906 616 \nQ 2728 306 2450 153 \nQ 2172 0 1784 0 \nQ 1141 0 747 490 \nQ 353 981 353 1791 \nQ 353 2603 747 3093 \nQ 1141 3584 1784 3584 \nQ 2172 3584 2450 3431 \nQ 2728 3278 2906 2969 \nL 2906 3500 \nL 3481 3500 \nL 3481 434 \nz\n\" id=\"DejaVuSans-67\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-41\"/>\n      <use x=\"62.533203\" xlink:href=\"#DejaVuSans-76\"/>\n      <use x=\"121.712891\" xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"183.236328\" xlink:href=\"#DejaVuSans-72\"/>\n      <use x=\"224.349609\" xlink:href=\"#DejaVuSans-61\"/>\n      <use x=\"285.628906\" xlink:href=\"#DejaVuSans-67\"/>\n      <use x=\"349.105469\" xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"410.628906\" xlink:href=\"#DejaVuSans-20\"/>\n      <use x=\"442.416016\" xlink:href=\"#DejaVuSans-6c\"/>\n      <use x=\"470.199219\" xlink:href=\"#DejaVuSans-6f\"/>\n      <use x=\"531.380859\" xlink:href=\"#DejaVuSans-73\"/>\n      <use x=\"583.480469\" xlink:href=\"#DejaVuSans-73\"/>\n     </g>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p781276b0eb\">\n   <rect height=\"434.88\" width=\"446.4\" x=\"43.78125\" y=\"7.2\"/>\n  </clipPath>\n </defs>\n</svg>\n",
      "image/png": "\n"
     },
     "metadata": {}
    },
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Finished in 2:25:04\n"
     ]
    }
   ],
   "source": [
    "num_epochs = 30\n",
    "train_model(net, train_iter, criterion, optimizer, num_epochs=num_epochs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "metadata": {},
     "execution_count": 26
    }
   ],
   "source": [
    "net_trained = transformer(text_embedding_vectors = text_embedding_vectors, vocab_size=VOCAB_SIZE, num_layers=NUM_LAYERS, d_ff=D_FF, d_model=D_MODEL, num_heads=NUM_HEADS, dropout=DROPOUT).to(device)\n",
    "net_trained.load_state_dict(torch.load('./snapshot/transformermodel.pt'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stoi(vocab, token, max_len):\n",
    "  indices=[]\n",
    "  token.extend(['<pad>'] * (max_len - len(token)))\n",
    "  for string in token:\n",
    "    if string in vocab:\n",
    "      i = vocab.index(string)\n",
    "    else:\n",
    "      i = 0\n",
    "    indices.append(i)\n",
    "  return torch.LongTensor(indices).unsqueeze(0)\n",
    "\n",
    "def itos(vocab, indices):\n",
    "  text = []\n",
    "  for i in indices.cpu()[0]:\n",
    "    if i==1:\n",
    "      break\n",
    "    else:\n",
    "      if i not in [PAD_TOKEN, START_TOKEN, END_TOKEN]:\n",
    "          if i != UNK_TOKEN:\n",
    "              text.append(vocab[i])\n",
    "          else:\n",
    "              text.append('??')\n",
    "  return \" \".join(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(input_sentence):\n",
    "    VOCAB_SIZE = 40\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    tokenizer = LTokenizer()\n",
    "    token = tokenizer(input_sentence)\n",
    "    input = stoi(Q.vocab.itos, token, VOCAB_SIZE).to(device)\n",
    "    output = torch.LongTensor(1, 1).fill_(START_TOKEN).to(device)\n",
    "    for i in range(VOCAB_SIZE):\n",
    "        predictions = net_trained(input, output)\n",
    "        predictions = predictions[:, -1:, :]\n",
    "        predicted_id = torch.argmax(predictions[:,:,3:], axis=-1) + 3\n",
    "        if predicted_id == END_TOKEN:\n",
    "            predicted_id = predicted_id\n",
    "            break\n",
    "        output = torch.cat((output, predicted_id),-1)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(sentence):\n",
    "  out = evaluate(sentence)\n",
    "  out_text = itos(Q.vocab.itos, out)\n",
    "  #print('input = [{0}]'.format(sentence))\n",
    "  #print('output = [{0}]'.format(out_text))\n",
    "  return out_text"
   ]
  },
  {
   "source": [
    "# 테스트"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "'어떻게 하면 기분이 나아질 수 있을까요'"
      ]
     },
     "metadata": {},
     "execution_count": 36
    }
   ],
   "source": [
    "result  = predict('직장상사한테 혼났어 기분이 별로야')\n",
    "result"
   ]
  }
 ]
}